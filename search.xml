<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>how to install graphviz</title>
      <link href="/2020/06/16/graphviz-install/"/>
      <url>/2020/06/16/graphviz-install/</url>
      
        <content type="html"><![CDATA[<h1 id="Here-is-the-answer"><a href="#Here-is-the-answer" class="headerlink" title="Here is the answer:"></a>Here is the answer:</h1><pre><code>1. open your anaconda prompt 2. input:  + conda install -c anaconda graphviz python-graphviz 3. it works for me and I believe it will do the same for you too</code></pre>]]></content>
      
      
      <categories>
          
          <category> MachineLearning </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql基础笔记</title>
      <link href="/2020/05/24/mysql-ji-chu-zhi-ling-bi-ji/"/>
      <url>/2020/05/24/mysql-ji-chu-zhi-ling-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL基础指令笔记："><a href="#MySQL基础指令笔记：" class="headerlink" title="MySQL基础指令笔记："></a>MySQL基础指令笔记：</h1><p>若无说明则默认每句代码后面需要加 “;”</p><h2 id="登陆与退出"><a href="#登陆与退出" class="headerlink" title="登陆与退出:"></a>登陆与退出:</h2><ol><li><p>[数据库文件夹名]  -u+用户名 -p+密码(建议-p后先回车再输入密码更为安全)  </p></li><li><p>使用exit 或者 quit加enter 退出</p></li></ol><p>注释：    </p><ol><li><p>单行注释： – 文字 或者 # 文字  </p></li><li><p>多行注释：/*文字段*/</p></li></ol><h2 id="操作数据库："><a href="#操作数据库：" class="headerlink" title="操作数据库："></a>操作数据库：</h2><ol><li>创建数据库：  <ul><li>create database 数据库名</li><li>create database if not exists 数据库名  </li><li>可在数据库名称后面增加character set 字符集名称，如character set utf8 或者  character set gbk  </li></ul></li><li>查询：  <ol><li>show databases (所有数据库)          </li><li>show create database 数据库名称(查看单个数据库)  </li></ol></li><li>修改：  <pre><code>* alter database 数据库名称 character set 字符集名称(修改数据库的字符集名称)  </code></pre></li><li>删除：  <ol><li>drop database 数据库名称   </li><li>drop database if exists 数据库名称  </li></ol></li><li>使用数据库：  <ol><li>use 数据库名称 </li><li>select database() 查看当前数据库名称  </li></ol></li><li>备份与还原数据库：<ol><li>备份：mysqldump -u[username] -p[password]  databasename &gt;url[保存路径]  </li><li>还原：新建数据库后使用 source url[备份路径]</li></ol></li></ol><h2 id="操作表："><a href="#操作表：" class="headerlink" title="操作表："></a>操作表：</h2><ol><li>表的创建(举例演示)：  </li></ol><pre class=" language-mysql"><code class="language-mysql">create table employee(    name varchar(), --在括号内输入整数表示字符多少    id int,    birthday date, --格式为yyyy-mm-dd    entrytime datetime(也可使用时间戳timestamp，时间戳默认为当前时间), --格式为yyyy-mm-dd hh:mm:ss);</code></pre><p><strong>最后一个参数后面无需逗号</strong>  </p><ol start="2"><li><p>表的复制：<br>create table 表名 like 需要复制的表名  </p></li><li><p>查询：  </p><ul><li>所有表：show tables  </li><li>单张表: desc 表名  </li></ul></li><li><p>表的修改：  </p><ol><li>表名：alter table 表名 rename to 新的表名  </li><li>修改字符集： 同数据库的设置字符集操作  </li><li>新增一列：alter table 表名 add 列名 数据类型   </li><li>修改列名和数据类型：alter tabe 表名 modify(change) 列名 <a href="如果需要修改列名，可不写">新列名</a> 新数据类型  </li><li>删除列：alter table 表名 drop 列名  </li></ol></li><li><p>删除表:  </p><ul><li><p>drop table 表名  </p></li><li><p>drop table if exists 表名(与操作数据库时相同，添加if语句更加安全)       </p></li></ul></li></ol><h2 id="操作表中数据"><a href="#操作表中数据" class="headerlink" title="操作表中数据:"></a>操作表中数据:</h2><p>​    1. 添加数据：  </p><p>​        * insert into 表名(列名1，列名2，…)values(数据1，数据2，…);    </p><pre class=" language-mysql"><code class="language-mysql">insert into student(name,id,gender,age) values ('张三',1,'男',30),('潘阿拉贡','女',16),('狄仁杰','男',23);</code></pre><ul><li><p>注意事项:  </p></li><li><p>列名可只写部分，但是后面的值输入要与列名的数据类型<em>一一对应</em>  。      </p></li><li><p>若表名后不写列名，则默认为所有列  </p></li><li><p>字符类型用’或者”来都可      </p><ol start="2"><li>删除数据：  <ul><li>delete from 表名 [^where 条件]</li></ul></li></ol><p>   [^where 条件]: 可选操作</p><ul><li><p>注意事项：  </p><ol><li>不加条件则默认<strong>全部删除</strong>  </li></ol></li></ul><ol start="2"><li><p>使用truncate table 表名[^效率更高] </p><p>[^效率更高]:先删除原先的表再创建新表</p></li></ol><ol start="3"><li><p>修改数据：  </p><ul><li>update 表名 set 列名1 = 值1,列名2 = 值2,… [^where 条件]</li></ul><p> [^where 条件]:可选,但若不加条件则默认全部数据都会被更改</p></li></ol></li></ul><h2 id="查询表数据："><a href="#查询表数据：" class="headerlink" title="查询表数据："></a>查询表数据：</h2><p>​     1. select 列名，聚合函数，可多选(也可使用*，代表所有内容) from 表名 条件(可选)   </p><pre class=" language-mysql"><code class="language-mysql">select * from student; --查询student表中的全部数据select id,age from student; --只显示id和age两列数据select * from student order by id [条件]; --默认为按id大小升序排列,条件asc为升序，desc为降序select * from student order by age asc,id asc; --在满足第一个排序条件后再进行第二轮排序(及在学生年龄相同时再通过学号大小进行排序)</code></pre><ol start="2"><li><p>聚合函数(可放在select或者from之后作为条件，聚合函数不计算null值)     </p><ul><li>count()：用于计算数据个数      <ul><li>若想把null值加入可选择ifnull函数：count(ifnull(可能为null的值,想要修改成的值))</li></ul></li><li>max()：计算最大值</li><li>min(): 计算最小值</li><li>sum(): 计算和</li><li>avg(): 计算平均值</li></ul><ol start="3"><li>条件以及常用的表达式  </li></ol><pre class=" language-mysql"><code class="language-mysql">#whereselect * from where age >15;select * from where age != 15;select * from where age <> 15; --与第二句类似select * from where age >15 &&(and) age<30;select * from student where age in (13,16,49);--只查询年龄为这三个数值之一的数据select * from student where score is not null;--分数不为空的学生#注意，null值只可通过 is 或者 is not 来判断#like(模糊查询)select * from student where name like '钟%'；--查询名字开头为钟的数据select * from student where name like '_钟%';--查询名字第二个字为钟的数据select * from student where name like '%钟%';--查询只要名字中含有钟字的数据select * from student where age between 10 and 20; --同age >=10 and age <= 20#group by(分组)select gender,avg(score),count(id) from student group by gender; --及将学生按性别分为两行，每行包括性别、平均分、总人数select gender,avg(score),count(id) from student where score>70 group by sex having count(id)>2;--与上一行类似，但选择的学生score要大于70，并在分组后的每组人数需大于2#limit(分页查询)select * from student limit firstindex,number; --从指定的索引firstindex开始展示出number数量的数据 </code></pre><ul><li><p>可在from后的列名前加上distinct来去除重复项   </p><pre><code>+ select distinct age from student;       </code></pre></li></ul><h2 id="约束"><a href="#约束" class="headerlink" title="约束:"></a>约束:</h2><p>  1.分类：  </p><ul><li><p>主键约束：primary key</p><ul><li><pre class=" language-mysql"><code class="language-mysql">create table student(    id int primary key,    --增加主键约束，id值唯一且非null    --一张表只允许一列出现主键    name varchar(20))</code></pre></li></ul></li></ul><ul><li><p>唯一约束：unique</p><ul><li><pre class=" language-mysql"><code class="language-mysql">create table student(    id int unique,    --id唯一但可以为null    --可以为多列使用    name varchar(20) unique)</code></pre></li></ul></li><li><p>非空约束：not null</p><ul><li><pre class=" language-mysql"><code class="language-mysql">create table student(    id int,    name varchar(15) not null    --学生姓名不能为空)</code></pre></li></ul></li><li><p>外键约束：foreign key</p><ul><li><pre class=" language-mysql"><code class="language-mysql">create table classroom(    class_id int constraint for_key foreign key id references student,    --constraint后为外键名称，可随意命名    --使教室的id与学生表中的id联系起来)</code></pre></li></ul></li><li><p>增删主键：</p><ul><li>alter table [表名] drop primary key  –delete</li><li>alter table [表名] modify [列名] [列的数据类型] primary key  –add  </li></ul></li><li><p>增删唯一：</p><ul><li>alter table [表名] drop index [列名]</li><li>alter table [表名] modify [列名] [列的数据类型] unique</li></ul></li><li><p>增删非空约束：</p><ul><li>alter table [表名] modify [列名] [列的数据类型] </li><li>alter table [表名] modify [列名] [列的数据类型] not null</li></ul></li><li><p>增删外键：</p><ul><li>alter table [表名] drop foreign key [外键名称]</li><li>alter table [表名] add constraint [外键名称] foreign key [列名] references [另表列名]</li></ul></li><li><p>其他操作：</p><ul><li>在外键创建时加入on update cascade 可以让两表的数据同步更新</li><li>on delete cascade 解除同步更新 </li><li>auto_increment 自动增长，可放在数据类型之后</li></ul></li></ul><h2 id="事务："><a href="#事务：" class="headerlink" title="事务："></a>事务：</h2><ol><li>开启事务：start transaction</li><li>提交：commit</li><li>回滚：rollback</li><li>提交方式：@@autocommit (1为自动，0为手动)<ol><li>select @@autocommit –查询</li><li>set @@autocommit = 0/1 –修改</li></ol></li><li>隔离等级(从上往下等级依次增强)：<ol><li>read uncommitted </li><li>read committed</li><li>repeatable read</li><li>serializable<ul><li>查询：select @@tx_isolation</li><li>设置： set global transaction isolation [隔离等级]</li></ul></li></ol></li></ol><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><ol><li>添加用户：create user ‘username’@’localhost’ identified by ‘password’</li><li>删除用户：drop user ‘username’@’localhost’</li><li>修改密码： <pre><code>* update user set password = password(&#39;new password&#39;) where user = &#39;username&#39;* set password for &#39;username&#39;@&#39;localhost&#39; = password(&#39;new password&#39;)</code></pre></li><li>权限查询： show grants for ‘username’@’localhost’</li><li>权限授予：<ul><li>grant [权限] on databasename.listname to ‘username’@’localhost’</li><li>grant all on <em>.</em> to ‘username’@’localhost’ –add all authority</li></ul></li><li>权限撤销：<ol><li>revoke [权限] on databasename.listname from ‘username’@’localhost’</li></ol></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>How Are You Doing?</title>
      <link href="/2020/02/17/myfirstpost/"/>
      <url>/2020/02/17/myfirstpost/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/02/17/hello-world/"/>
      <url>/2020/02/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
